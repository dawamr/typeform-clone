---

---

<form action='/api/form/submit' enctype='multipart/form-data' method='post' class='questions w-full max-w-2xl'></form>
<script>
  const questions = [
    { label: 'Startup Name', name: 'startup_name', type: 'text' },
    { label: 'Faunded Year', name: 'founded_year', type: 'number' },
    { label: 'Address', name: 'address', type: 'text' },
    { label: 'Address line 2', name: 'address_line2', type: 'text' },
    { label: 'City/Town', name: 'city', type: 'text' },
    { label: 'State/Region/Province', name: 'state', type: 'text' },
    { label: 'Zip/Post Code', name: 'zip', type: 'text' },
    { label: 'Country', name: 'country', type: 'text' },
    { label: 'Website', name: 'website', type: 'url' },
    { label: 'Contact Name', name: 'contact_name', type: 'text' },
    { label: 'Contact Position', name: 'contact_position', type: 'text' },
    { label: 'Contact Email', name: 'contact_email', type: 'email' },
    { label: 'Contact Phone', name: 'contact_phone', type: 'tel' },
    { label: 'About Startup (1 sentence Pitch)', name: 'pitch', type: 'text' },
    {
      label: 'Describe your startup in more detail',
      name: 'description',
      type: 'textarea',
    },
    { label: 'What problem does your startup aim to solve?', name: 'problem', type: 'textarea' },
    { label: 'What solution does your startup offer?', name: 'solution', type: 'textarea' },
    { label: 'What competitive advantage does your startup have?', name: 'competitive_advantage', type: 'textarea' },
    { label: 'Who is your target market?', name: 'target_market', type: 'text' },
    { label: 'Has your startup generated any revenue', name: 'revenue', type: 'text' },
    { label: 'What are the key achievements of your startup so far?', name: 'achievements', type: 'textarea' },
    { label: 'Introduce your core startup team and explain their roles.', name: 'team', type: 'textarea' },
    { label: 'Has your startup received funding in the past?', name: 'funding', type: 'textarea' },
    {
      label: 'What do you hope to gain from participating in ‘AI Empower Connect’?',
      name: 'expectations',
      type: 'textarea',
    },
    { label: 'Are you currently seeking funding?', name: 'seeking_funding', type: 'text' },
    {
      label: 'Apart from funding, is your startup open to partnerships?',
      name: 'partnership',
      type: 'textarea',
    },
    { label: 'Attach your pitch deck (Google Drive link).', name: 'pitch_deck', type: 'url' },
    { label: 'Optional: Provide a link to a demo video.', name: 'demo_video', type: 'url' },
  ];

  questions.forEach((question, index) => {
    let doc = '';
    let input = '';

    if (question.type === 'textarea') {
      input = `<textarea
          class='h-32 w-full px-4 py-3 bg-white bg-opacity-10 rounded-lg text-2xl placeholder-white placeholder-opacity-60 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50 transition duration-300'
          placeholder=${question.label}
          type=${question.type}
          name=${question.name}
        ></textarea>`;
    } else {
      input = `<input
          class='w-full px-4 py-3 bg-white bg-opacity-10 rounded-lg text-2xl placeholder-white placeholder-opacity-60 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50 transition duration-300'
          type=${question.type}
          placeholder=${question.label}
          name=${question.name}
        />`;
    }

    doc += `<astero-form class='questions-list hidden'>
      <div class='mb-8'>
        <h1 class='text-4xl font-semibold mb-2' style='text-shadow: 1px 2px 2px rgb(0 0 0 / 0.5)'>
          ${index + 1} ⭢ ${question.label}
        </h1>
        <p class='text-xl opacity-80'></p>
      </div>
      <div class='relative mb-3'>
        ${input}
        <button-next
          class='absolute right-3 bottom-3 h-8 px-4 py-2 bg-white text-pink-600 rounded text-sm font-semibold hover:bg-opacity-90 transition-colors duration-200'
        >
          OK <span class='text-xs opacity-70 ml-1'>press Enter ↵</span>
        </button-next>
      </div>
      <button-prev
        class='mt-3 bottom-3 px-4 py-1 bg-white text-pink-600 rounded text-sm font-semibold hover:bg-opacity-90 transition-colors duration-200'
      >
        ⭠ Previous
      </button-prev>
    </astero-form>`;

    document.querySelector('.questions').innerHTML += doc;
  });

  let currentStep = 0;
  const questionsList = document.querySelectorAll('.questions-list');
  const inputList = document.querySelectorAll('input');

  function showStep(step: number) {
    questionsList.forEach((question, index) => {
      if (index === step) {
        question.classList.remove('hidden');
      } else {
        question.classList.add('hidden');
      }
    });
  }

  // function enterKey() {
  //   document.addEventListener('keydown', (e) => {
  //     if (e.key === 'Enter') {
  //       currentStep++;
  //       if (currentStep < questionsList.length) {
  //         showStep(currentStep);
  //       } else {
  //         currentStep = questionsList.length - 1;
  //         document.querySelector('form').submit();
  //       }
  //     }
  //   });
  // }

  inputList.forEach((input) => {
    input.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        currentStep++;
        if (currentStep < questionsList.length) {
          showStep(currentStep);
          inputList[currentStep].focus();
        } else {
          currentStep = questionsList.length - 1;
          document.querySelector('form').submit();
        }
      }
    });
  });

  class AstroForm extends HTMLElement {
    constructor() {
      super();
    }
  }

  class ButtonNext extends HTMLElement {
    constructor() {
      super();
      this.addEventListener('click', () => {
        currentStep++;
        if (currentStep < questionsList.length) {
          showStep(currentStep);
          inputList[currentStep].focus();
        } else {
          currentStep = questionsList.length - 1;
          this.innerHTML = 'Submit ↵';

          // const inputList = document.querySelectorAll('input');
          // inputList.forEach((input, index) => {
          //   questions[index].value = input.value;
          // });

          document.querySelector('form').submit();

          // supabase upsert

          // console.log(questions);
        }
      });
      this.style.cursor = 'pointer';
    }
  }

  class ButtonPrev extends HTMLElement {
    constructor() {
      super();
      this.addEventListener('click', () => {
        currentStep--;
        if (currentStep >= 0) {
          showStep(currentStep);
          inputList[currentStep].focus();
        } else {
          currentStep = 0;
        }
      });
      this.style.cursor = 'pointer';
    }
  }

  customElements.define('astro-form', AstroForm);
  customElements.define('button-next', ButtonNext);
  customElements.define('button-prev', ButtonPrev);

  document.addEventListener('DOMContentLoaded', () => {
    showStep(currentStep);
  });
</script>
